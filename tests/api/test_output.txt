============================= test session starts ==============================
platform linux -- Python 3.10.6, pytest-8.3.5, pluggy-1.5.0 -- /home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/bin/python
cachedir: .pytest_cache
rootdir: /home/elias/code/Elias0512vs/07-ML-Ops/04-Predict-in-production/data-fast-api/tests
configfile: pytest_kitt.ini
plugins: asyncio-0.26.0, anyio-3.7.1, time-machine-2.16.0
asyncio: mode=strict, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collecting ... collected 18 items

tests/api/test_cloud_endpoints.py::test_root_is_up PASSED                [  5%]
tests/api/test_cloud_endpoints.py::test_root_returns_greeting PASSED     [ 11%]
tests/api/test_cloud_endpoints.py::test_predict_is_up PASSED             [ 16%]
tests/api/test_cloud_endpoints.py::test_predict_is_dict PASSED           [ 22%]
tests/api/test_cloud_endpoints.py::test_predict_has_key PASSED           [ 27%]
tests/api/test_cloud_endpoints.py::test_cloud_api_predict PASSED         [ 33%]
tests/api/test_docker_endpoints.py::test_root_is_up FAILED               [ 38%]
tests/api/test_docker_endpoints.py::test_root_returns_greeting FAILED    [ 44%]
tests/api/test_docker_endpoints.py::test_predict_is_up FAILED            [ 50%]
tests/api/test_docker_endpoints.py::test_predict_is_dict FAILED          [ 55%]
tests/api/test_docker_endpoints.py::test_predict_has_key FAILED          [ 61%]
tests/api/test_docker_endpoints.py::test_cloud_api_predict FAILED        [ 66%]
tests/api/test_endpoints.py::test_root_is_up PASSED                      [ 72%]
tests/api/test_endpoints.py::test_root_returns_greeting PASSED           [ 77%]
tests/api/test_endpoints.py::test_predict_is_up PASSED                   [ 83%]
tests/api/test_endpoints.py::test_predict_is_dict PASSED                 [ 88%]
tests/api/test_endpoints.py::test_predict_has_key PASSED                 [ 94%]
tests/api/test_endpoints.py::test_predict_val_is_float PASSED            [100%]

=================================== FAILURES ===================================
_______________________________ test_root_is_up ________________________________

    @contextlib.contextmanager
    def map_httpcore_exceptions() -> typing.Iterator[None]:
        try:
>           yield

/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_transports/default.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_transports/default.py:377: in handle_async_request
    resp = await self._pool.handle_async_request(req)
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/connection_pool.py:256: in handle_async_request
    raise exc from None
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/connection_pool.py:236: in handle_async_request
    response = await connection.handle_async_request(
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/connection.py:103: in handle_async_request
    return await self._connection.handle_async_request(request)
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/http11.py:136: in handle_async_request
    raise exc
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/http11.py:106: in handle_async_request
    ) = await self._receive_response_headers(**kwargs)
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/http11.py:177: in _receive_response_headers
    event = await self._receive_event(timeout=timeout)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <AsyncHTTP11Connection ['http://localhost:8000', CLOSED, Request Count: 1]>
timeout = 10

    async def _receive_event(
        self, timeout: float | None = None
    ) -> h11.Event | type[h11.PAUSED]:
        while True:
            with map_exceptions({h11.RemoteProtocolError: RemoteProtocolError}):
                event = self._h11_state.next_event()
    
            if event is h11.NEED_DATA:
                data = await self._network_stream.read(
                    self.READ_NUM_BYTES, timeout=timeout
                )
    
                # If we feed this case through h11 we'll raise an exception like:
                #
                #     httpcore.RemoteProtocolError: can't handle event type
                #     ConnectionClosed when role=SERVER and state=SEND_RESPONSE
                #
                # Which is accurate, but not very informative from an end-user
                # perspective. Instead we handle this case distinctly and treat
                # it as a ConnectError.
                if data == b"" and self._h11_state.their_state == h11.SEND_RESPONSE:
                    msg = "Server disconnected without sending a response."
>                   raise RemoteProtocolError(msg)
E                   httpcore.RemoteProtocolError: Server disconnected without sending a response.

/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/http11.py:231: RemoteProtocolError

The above exception was the direct cause of the following exception:

    @pytest.mark.asyncio
    async def test_root_is_up():
        assert docker_port # Stop if no docker port found
        async with AsyncClient(base_url=SERVICE_URL, timeout=10) as ac:
>           response = await ac.get("/")

tests/api/test_docker_endpoints.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1814: in get
    return await self.request(
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1585: in request
    return await self.send(request, auth=auth, follow_redirects=follow_redirects)
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1674: in send
    response = await self._send_handling_auth(
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1702: in _send_handling_auth
    response = await self._send_handling_redirects(
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1739: in _send_handling_redirects
    response = await self._send_single_request(request)
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1776: in _send_single_request
    response = await transport.handle_async_request(request)
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_transports/default.py:376: in handle_async_request
    with map_httpcore_exceptions():
/home/elias/.pyenv/versions/3.10.6/lib/python3.10/contextlib.py:153: in __exit__
    self.gen.throw(typ, value, traceback)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @contextlib.contextmanager
    def map_httpcore_exceptions() -> typing.Iterator[None]:
        try:
            yield
        except Exception as exc:
            mapped_exc = None
    
            for from_exc, to_exc in HTTPCORE_EXC_MAP.items():
                if not isinstance(exc, from_exc):
                    continue
                # We want to map to the most specific exception we can find.
                # Eg if `exc` is an `httpcore.ReadTimeout`, we want to map to
                # `httpx.ReadTimeout`, not just `httpx.TimeoutException`.
                if mapped_exc is None or issubclass(to_exc, mapped_exc):
                    mapped_exc = to_exc
    
            if mapped_exc is None:  # pragma: no cover
                raise
    
            message = str(exc)
>           raise mapped_exc(message) from exc
E           httpx.RemoteProtocolError: Server disconnected without sending a response.

/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_transports/default.py:89: RemoteProtocolError
__________________________ test_root_returns_greeting __________________________

    @contextlib.contextmanager
    def map_httpcore_exceptions() -> typing.Iterator[None]:
        try:
>           yield

/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_transports/default.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_transports/default.py:377: in handle_async_request
    resp = await self._pool.handle_async_request(req)
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/connection_pool.py:256: in handle_async_request
    raise exc from None
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/connection_pool.py:236: in handle_async_request
    response = await connection.handle_async_request(
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/connection.py:103: in handle_async_request
    return await self._connection.handle_async_request(request)
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/http11.py:136: in handle_async_request
    raise exc
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/http11.py:106: in handle_async_request
    ) = await self._receive_response_headers(**kwargs)
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/http11.py:177: in _receive_response_headers
    event = await self._receive_event(timeout=timeout)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <AsyncHTTP11Connection ['http://localhost:8000', CLOSED, Request Count: 1]>
timeout = 10

    async def _receive_event(
        self, timeout: float | None = None
    ) -> h11.Event | type[h11.PAUSED]:
        while True:
            with map_exceptions({h11.RemoteProtocolError: RemoteProtocolError}):
                event = self._h11_state.next_event()
    
            if event is h11.NEED_DATA:
                data = await self._network_stream.read(
                    self.READ_NUM_BYTES, timeout=timeout
                )
    
                # If we feed this case through h11 we'll raise an exception like:
                #
                #     httpcore.RemoteProtocolError: can't handle event type
                #     ConnectionClosed when role=SERVER and state=SEND_RESPONSE
                #
                # Which is accurate, but not very informative from an end-user
                # perspective. Instead we handle this case distinctly and treat
                # it as a ConnectError.
                if data == b"" and self._h11_state.their_state == h11.SEND_RESPONSE:
                    msg = "Server disconnected without sending a response."
>                   raise RemoteProtocolError(msg)
E                   httpcore.RemoteProtocolError: Server disconnected without sending a response.

/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/http11.py:231: RemoteProtocolError

The above exception was the direct cause of the following exception:

    @pytest.mark.asyncio
    async def test_root_returns_greeting():
        assert docker_port # Stop if no docker port found
        async with AsyncClient(base_url=SERVICE_URL, timeout=10) as ac:
>           response = await ac.get("/")

tests/api/test_docker_endpoints.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1814: in get
    return await self.request(
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1585: in request
    return await self.send(request, auth=auth, follow_redirects=follow_redirects)
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1674: in send
    response = await self._send_handling_auth(
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1702: in _send_handling_auth
    response = await self._send_handling_redirects(
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1739: in _send_handling_redirects
    response = await self._send_single_request(request)
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1776: in _send_single_request
    response = await transport.handle_async_request(request)
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_transports/default.py:376: in handle_async_request
    with map_httpcore_exceptions():
/home/elias/.pyenv/versions/3.10.6/lib/python3.10/contextlib.py:153: in __exit__
    self.gen.throw(typ, value, traceback)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @contextlib.contextmanager
    def map_httpcore_exceptions() -> typing.Iterator[None]:
        try:
            yield
        except Exception as exc:
            mapped_exc = None
    
            for from_exc, to_exc in HTTPCORE_EXC_MAP.items():
                if not isinstance(exc, from_exc):
                    continue
                # We want to map to the most specific exception we can find.
                # Eg if `exc` is an `httpcore.ReadTimeout`, we want to map to
                # `httpx.ReadTimeout`, not just `httpx.TimeoutException`.
                if mapped_exc is None or issubclass(to_exc, mapped_exc):
                    mapped_exc = to_exc
    
            if mapped_exc is None:  # pragma: no cover
                raise
    
            message = str(exc)
>           raise mapped_exc(message) from exc
E           httpx.RemoteProtocolError: Server disconnected without sending a response.

/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_transports/default.py:89: RemoteProtocolError
______________________________ test_predict_is_up ______________________________

    @contextlib.contextmanager
    def map_httpcore_exceptions() -> typing.Iterator[None]:
        try:
>           yield

/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_transports/default.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_transports/default.py:377: in handle_async_request
    resp = await self._pool.handle_async_request(req)
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/connection_pool.py:256: in handle_async_request
    raise exc from None
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/connection_pool.py:236: in handle_async_request
    response = await connection.handle_async_request(
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/connection.py:103: in handle_async_request
    return await self._connection.handle_async_request(request)
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/http11.py:136: in handle_async_request
    raise exc
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/http11.py:106: in handle_async_request
    ) = await self._receive_response_headers(**kwargs)
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/http11.py:177: in _receive_response_headers
    event = await self._receive_event(timeout=timeout)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <AsyncHTTP11Connection ['http://localhost:8000', CLOSED, Request Count: 1]>
timeout = 10

    async def _receive_event(
        self, timeout: float | None = None
    ) -> h11.Event | type[h11.PAUSED]:
        while True:
            with map_exceptions({h11.RemoteProtocolError: RemoteProtocolError}):
                event = self._h11_state.next_event()
    
            if event is h11.NEED_DATA:
                data = await self._network_stream.read(
                    self.READ_NUM_BYTES, timeout=timeout
                )
    
                # If we feed this case through h11 we'll raise an exception like:
                #
                #     httpcore.RemoteProtocolError: can't handle event type
                #     ConnectionClosed when role=SERVER and state=SEND_RESPONSE
                #
                # Which is accurate, but not very informative from an end-user
                # perspective. Instead we handle this case distinctly and treat
                # it as a ConnectError.
                if data == b"" and self._h11_state.their_state == h11.SEND_RESPONSE:
                    msg = "Server disconnected without sending a response."
>                   raise RemoteProtocolError(msg)
E                   httpcore.RemoteProtocolError: Server disconnected without sending a response.

/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/http11.py:231: RemoteProtocolError

The above exception was the direct cause of the following exception:

    @pytest.mark.asyncio
    async def test_predict_is_up():
        assert docker_port # Stop if no docker port found
        async with AsyncClient(base_url=SERVICE_URL, timeout=10) as ac:
>           response = await ac.get("/predict", params=test_params)

tests/api/test_docker_endpoints.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1814: in get
    return await self.request(
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1585: in request
    return await self.send(request, auth=auth, follow_redirects=follow_redirects)
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1674: in send
    response = await self._send_handling_auth(
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1702: in _send_handling_auth
    response = await self._send_handling_redirects(
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1739: in _send_handling_redirects
    response = await self._send_single_request(request)
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1776: in _send_single_request
    response = await transport.handle_async_request(request)
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_transports/default.py:376: in handle_async_request
    with map_httpcore_exceptions():
/home/elias/.pyenv/versions/3.10.6/lib/python3.10/contextlib.py:153: in __exit__
    self.gen.throw(typ, value, traceback)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @contextlib.contextmanager
    def map_httpcore_exceptions() -> typing.Iterator[None]:
        try:
            yield
        except Exception as exc:
            mapped_exc = None
    
            for from_exc, to_exc in HTTPCORE_EXC_MAP.items():
                if not isinstance(exc, from_exc):
                    continue
                # We want to map to the most specific exception we can find.
                # Eg if `exc` is an `httpcore.ReadTimeout`, we want to map to
                # `httpx.ReadTimeout`, not just `httpx.TimeoutException`.
                if mapped_exc is None or issubclass(to_exc, mapped_exc):
                    mapped_exc = to_exc
    
            if mapped_exc is None:  # pragma: no cover
                raise
    
            message = str(exc)
>           raise mapped_exc(message) from exc
E           httpx.RemoteProtocolError: Server disconnected without sending a response.

/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_transports/default.py:89: RemoteProtocolError
_____________________________ test_predict_is_dict _____________________________

    @contextlib.contextmanager
    def map_httpcore_exceptions() -> typing.Iterator[None]:
        try:
>           yield

/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_transports/default.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_transports/default.py:377: in handle_async_request
    resp = await self._pool.handle_async_request(req)
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/connection_pool.py:256: in handle_async_request
    raise exc from None
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/connection_pool.py:236: in handle_async_request
    response = await connection.handle_async_request(
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/connection.py:103: in handle_async_request
    return await self._connection.handle_async_request(request)
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/http11.py:136: in handle_async_request
    raise exc
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/http11.py:106: in handle_async_request
    ) = await self._receive_response_headers(**kwargs)
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/http11.py:177: in _receive_response_headers
    event = await self._receive_event(timeout=timeout)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <AsyncHTTP11Connection ['http://localhost:8000', CLOSED, Request Count: 1]>
timeout = 10

    async def _receive_event(
        self, timeout: float | None = None
    ) -> h11.Event | type[h11.PAUSED]:
        while True:
            with map_exceptions({h11.RemoteProtocolError: RemoteProtocolError}):
                event = self._h11_state.next_event()
    
            if event is h11.NEED_DATA:
                data = await self._network_stream.read(
                    self.READ_NUM_BYTES, timeout=timeout
                )
    
                # If we feed this case through h11 we'll raise an exception like:
                #
                #     httpcore.RemoteProtocolError: can't handle event type
                #     ConnectionClosed when role=SERVER and state=SEND_RESPONSE
                #
                # Which is accurate, but not very informative from an end-user
                # perspective. Instead we handle this case distinctly and treat
                # it as a ConnectError.
                if data == b"" and self._h11_state.their_state == h11.SEND_RESPONSE:
                    msg = "Server disconnected without sending a response."
>                   raise RemoteProtocolError(msg)
E                   httpcore.RemoteProtocolError: Server disconnected without sending a response.

/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/http11.py:231: RemoteProtocolError

The above exception was the direct cause of the following exception:

    @pytest.mark.asyncio
    async def test_predict_is_dict():
        assert docker_port # Stop if no docker port found
        async with AsyncClient(base_url=SERVICE_URL, timeout=10) as ac:
>           response = await ac.get("/predict", params=test_params)

tests/api/test_docker_endpoints.py:74: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1814: in get
    return await self.request(
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1585: in request
    return await self.send(request, auth=auth, follow_redirects=follow_redirects)
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1674: in send
    response = await self._send_handling_auth(
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1702: in _send_handling_auth
    response = await self._send_handling_redirects(
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1739: in _send_handling_redirects
    response = await self._send_single_request(request)
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1776: in _send_single_request
    response = await transport.handle_async_request(request)
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_transports/default.py:376: in handle_async_request
    with map_httpcore_exceptions():
/home/elias/.pyenv/versions/3.10.6/lib/python3.10/contextlib.py:153: in __exit__
    self.gen.throw(typ, value, traceback)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @contextlib.contextmanager
    def map_httpcore_exceptions() -> typing.Iterator[None]:
        try:
            yield
        except Exception as exc:
            mapped_exc = None
    
            for from_exc, to_exc in HTTPCORE_EXC_MAP.items():
                if not isinstance(exc, from_exc):
                    continue
                # We want to map to the most specific exception we can find.
                # Eg if `exc` is an `httpcore.ReadTimeout`, we want to map to
                # `httpx.ReadTimeout`, not just `httpx.TimeoutException`.
                if mapped_exc is None or issubclass(to_exc, mapped_exc):
                    mapped_exc = to_exc
    
            if mapped_exc is None:  # pragma: no cover
                raise
    
            message = str(exc)
>           raise mapped_exc(message) from exc
E           httpx.RemoteProtocolError: Server disconnected without sending a response.

/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_transports/default.py:89: RemoteProtocolError
_____________________________ test_predict_has_key _____________________________

    @contextlib.contextmanager
    def map_httpcore_exceptions() -> typing.Iterator[None]:
        try:
>           yield

/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_transports/default.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_transports/default.py:377: in handle_async_request
    resp = await self._pool.handle_async_request(req)
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/connection_pool.py:256: in handle_async_request
    raise exc from None
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/connection_pool.py:236: in handle_async_request
    response = await connection.handle_async_request(
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/connection.py:103: in handle_async_request
    return await self._connection.handle_async_request(request)
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/http11.py:136: in handle_async_request
    raise exc
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/http11.py:106: in handle_async_request
    ) = await self._receive_response_headers(**kwargs)
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/http11.py:177: in _receive_response_headers
    event = await self._receive_event(timeout=timeout)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <AsyncHTTP11Connection ['http://localhost:8000', CLOSED, Request Count: 1]>
timeout = 10

    async def _receive_event(
        self, timeout: float | None = None
    ) -> h11.Event | type[h11.PAUSED]:
        while True:
            with map_exceptions({h11.RemoteProtocolError: RemoteProtocolError}):
                event = self._h11_state.next_event()
    
            if event is h11.NEED_DATA:
                data = await self._network_stream.read(
                    self.READ_NUM_BYTES, timeout=timeout
                )
    
                # If we feed this case through h11 we'll raise an exception like:
                #
                #     httpcore.RemoteProtocolError: can't handle event type
                #     ConnectionClosed when role=SERVER and state=SEND_RESPONSE
                #
                # Which is accurate, but not very informative from an end-user
                # perspective. Instead we handle this case distinctly and treat
                # it as a ConnectError.
                if data == b"" and self._h11_state.their_state == h11.SEND_RESPONSE:
                    msg = "Server disconnected without sending a response."
>                   raise RemoteProtocolError(msg)
E                   httpcore.RemoteProtocolError: Server disconnected without sending a response.

/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/http11.py:231: RemoteProtocolError

The above exception was the direct cause of the following exception:

    @pytest.mark.asyncio
    async def test_predict_has_key():
        assert docker_port # Stop if no docker port found
        async with AsyncClient(base_url=SERVICE_URL, timeout=10) as ac:
>           response = await ac.get("/predict", params=test_params)

tests/api/test_docker_endpoints.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1814: in get
    return await self.request(
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1585: in request
    return await self.send(request, auth=auth, follow_redirects=follow_redirects)
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1674: in send
    response = await self._send_handling_auth(
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1702: in _send_handling_auth
    response = await self._send_handling_redirects(
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1739: in _send_handling_redirects
    response = await self._send_single_request(request)
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1776: in _send_single_request
    response = await transport.handle_async_request(request)
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_transports/default.py:376: in handle_async_request
    with map_httpcore_exceptions():
/home/elias/.pyenv/versions/3.10.6/lib/python3.10/contextlib.py:153: in __exit__
    self.gen.throw(typ, value, traceback)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @contextlib.contextmanager
    def map_httpcore_exceptions() -> typing.Iterator[None]:
        try:
            yield
        except Exception as exc:
            mapped_exc = None
    
            for from_exc, to_exc in HTTPCORE_EXC_MAP.items():
                if not isinstance(exc, from_exc):
                    continue
                # We want to map to the most specific exception we can find.
                # Eg if `exc` is an `httpcore.ReadTimeout`, we want to map to
                # `httpx.ReadTimeout`, not just `httpx.TimeoutException`.
                if mapped_exc is None or issubclass(to_exc, mapped_exc):
                    mapped_exc = to_exc
    
            if mapped_exc is None:  # pragma: no cover
                raise
    
            message = str(exc)
>           raise mapped_exc(message) from exc
E           httpx.RemoteProtocolError: Server disconnected without sending a response.

/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_transports/default.py:89: RemoteProtocolError
____________________________ test_cloud_api_predict ____________________________

    @contextlib.contextmanager
    def map_httpcore_exceptions() -> typing.Iterator[None]:
        try:
>           yield

/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_transports/default.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_transports/default.py:377: in handle_async_request
    resp = await self._pool.handle_async_request(req)
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/connection_pool.py:256: in handle_async_request
    raise exc from None
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/connection_pool.py:236: in handle_async_request
    response = await connection.handle_async_request(
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/connection.py:103: in handle_async_request
    return await self._connection.handle_async_request(request)
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/http11.py:136: in handle_async_request
    raise exc
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/http11.py:106: in handle_async_request
    ) = await self._receive_response_headers(**kwargs)
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/http11.py:177: in _receive_response_headers
    event = await self._receive_event(timeout=timeout)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <AsyncHTTP11Connection ['http://localhost:8000', CLOSED, Request Count: 1]>
timeout = 10

    async def _receive_event(
        self, timeout: float | None = None
    ) -> h11.Event | type[h11.PAUSED]:
        while True:
            with map_exceptions({h11.RemoteProtocolError: RemoteProtocolError}):
                event = self._h11_state.next_event()
    
            if event is h11.NEED_DATA:
                data = await self._network_stream.read(
                    self.READ_NUM_BYTES, timeout=timeout
                )
    
                # If we feed this case through h11 we'll raise an exception like:
                #
                #     httpcore.RemoteProtocolError: can't handle event type
                #     ConnectionClosed when role=SERVER and state=SEND_RESPONSE
                #
                # Which is accurate, but not very informative from an end-user
                # perspective. Instead we handle this case distinctly and treat
                # it as a ConnectError.
                if data == b"" and self._h11_state.their_state == h11.SEND_RESPONSE:
                    msg = "Server disconnected without sending a response."
>                   raise RemoteProtocolError(msg)
E                   httpcore.RemoteProtocolError: Server disconnected without sending a response.

/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpcore/_async/http11.py:231: RemoteProtocolError

The above exception was the direct cause of the following exception:

    @pytest.mark.asyncio
    async def test_cloud_api_predict():
        assert docker_port # Stop if no docker port found
        async with AsyncClient(base_url=SERVICE_URL, timeout=10) as ac:
>           response = await ac.get("/predict", params=test_params)

tests/api/test_docker_endpoints.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1814: in get
    return await self.request(
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1585: in request
    return await self.send(request, auth=auth, follow_redirects=follow_redirects)
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1674: in send
    response = await self._send_handling_auth(
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1702: in _send_handling_auth
    response = await self._send_handling_redirects(
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1739: in _send_handling_redirects
    response = await self._send_single_request(request)
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1776: in _send_single_request
    response = await transport.handle_async_request(request)
/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_transports/default.py:376: in handle_async_request
    with map_httpcore_exceptions():
/home/elias/.pyenv/versions/3.10.6/lib/python3.10/contextlib.py:153: in __exit__
    self.gen.throw(typ, value, traceback)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @contextlib.contextmanager
    def map_httpcore_exceptions() -> typing.Iterator[None]:
        try:
            yield
        except Exception as exc:
            mapped_exc = None
    
            for from_exc, to_exc in HTTPCORE_EXC_MAP.items():
                if not isinstance(exc, from_exc):
                    continue
                # We want to map to the most specific exception we can find.
                # Eg if `exc` is an `httpcore.ReadTimeout`, we want to map to
                # `httpx.ReadTimeout`, not just `httpx.TimeoutException`.
                if mapped_exc is None or issubclass(to_exc, mapped_exc):
                    mapped_exc = to_exc
    
            if mapped_exc is None:  # pragma: no cover
                raise
    
            message = str(exc)
>           raise mapped_exc(message) from exc
E           httpx.RemoteProtocolError: Server disconnected without sending a response.

/home/elias/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_transports/default.py:89: RemoteProtocolError
=========================== short test summary info ============================
FAILED tests/api/test_docker_endpoints.py::test_root_is_up - httpx.RemoteProt...
FAILED tests/api/test_docker_endpoints.py::test_root_returns_greeting - httpx...
FAILED tests/api/test_docker_endpoints.py::test_predict_is_up - httpx.RemoteP...
FAILED tests/api/test_docker_endpoints.py::test_predict_is_dict - httpx.Remot...
FAILED tests/api/test_docker_endpoints.py::test_predict_has_key - httpx.Remot...
FAILED tests/api/test_docker_endpoints.py::test_cloud_api_predict - httpx.Rem...
================== 6 failed, 12 passed, 19 warnings in 55.34s ==================
